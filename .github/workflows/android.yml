name: Android APK CI

on:
  push:
    branches: [ "master" ] # 当代码推送到 master 分支时触发
  pull_request:
    branches: [ "master" ] # 当向 master 分支发起 Pull Request 时触发

jobs:
  build:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境上运行

    steps:
    - name: Checkout code # 步骤1: 检出您的代码
      uses: actions/checkout@v4

    - name: Set up JDK # 步骤2: 设置 Java 开发工具包
      uses: actions/setup-java@v4
      with:
        java-version: '17' # **需要您确认：请检查您的 libs.versions.toml 中的 javaVersion 对应的值**
        distribution: 'temurin'
        cache: gradle

    - name: Cache Gradle packages # 步骤3: 缓存 Gradle 依赖，避免每次都重新下载
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches # 缓存路径
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Android SDK # 步骤4: 设置 Android SDK 环境，这是编译 APK 的核心！
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 'latest'
        packages: |
          # **需要您确认：请检查您的 libs.versions.toml 中的 compileSdk 对应的值，并替换下面的 34**
          - platforms;android-34
          - build-tools;34.0.0   # 默认使用 34.0.0，与 compileSdk 34 兼容
          - platform-tools
          # 如果您的项目使用了 NDK (Native Development Kit)，请取消下面这行的注释并指定 NDK 版本
          # 例如：- ndk;23.1.7779620 (请根据您的实际需求确认是否需要 NDK)
        accept-android-sdk-licenses: true

    - name: Grant execute permission for gradlew # 步骤5: 为 Gradle Wrapper 脚本添加执行权限
      run: chmod +x gradlew

    - name: Build debug APK # 步骤6: 编译 Debug 版本的 APK 文件
      run: ./gradlew assembleDebug

    - name: Upload debug APK # 步骤7: 将编译好的 APK 文件作为工作流产物上传
      uses: actions/upload-artifact@v4
      with:
        name: app-debug.apk # 上传后在 GitHub Actions 界面上显示的文件名
        # **需要您确认：请根据您的项目实际 APK 输出路径修改此值**
        # 常见路径：app/build/outputs/apk/debug/app-debug.apk
        path: app/build/outputs/apk/debug/app-debug.apk
